# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
# Configuration reference: https://circleci.com/docs/2.0/configuration-reference/
#
version: 2.1

executors:
  php-executor:
    docker:
      - image: quay.io/api-platform/php
        environment:
          APP_ENV: test

  client-executor:
    docker:
      - image: node:11.5-alpine

  docker-executor:
    docker:
      - image: docker/compose:1.23.2

  deploy-executor:
    docker:
      - image: lachlanevenson/k8s-kubectl:v1.13.2

jobs:
  # API
  init-api:
    executor: php-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - vendor-{{ checksum "api/composer.lock" }}
            - vendor-
      - run:
          name: Install dependencies
          working_directory: api
          command: composer install --prefer-dist --no-progress --no-suggest --no-interaction
      - run:
          name: Build swagger documentation
          working_directory: api
          command: bin/console api:swagger:export > swagger.json
      - save_cache:
          paths:
            - api/vendor
          key: vendor-{{ checksum "api/composer.lock" }}
      - save_cache:
          paths:
            - ./api
          key: api-{{ .Environment.CIRCLE_SHA1 }}
      - save_cache:
          paths:
            - ./ci
          key: ci-{{ .Environment.CIRCLE_SHA1 }}

  security_checker:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Security checker
          working_directory: api
          command: bin/console security:check

  doctrine_schema_validator:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Doctrine schema validator
          working_directory: api
          command: bin/console doctrine:schema:validate --skip-sync

  behat:
    docker:
      - image: quay.io/api-platform/php
        environment:
          APP_ENV: test
          MERCURE_PUBLISH_URL: http://mercure/hub
          MERCURE_SUBSCRIBE_URL: http://mercure/hub
          MERCURE_JWT: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJtZXJjdXJlIjp7InN1YnNjcmliZSI6WyJmb28iLCJiYXIiXSwicHVibGlzaCI6WyJmb28iXX19.LRLvirgONK13JgacQ_VbcjySbVhkSmHy3IznH3tA9PM
      - image: dunglas/mercure
        name: mercure
        environment:
          JWT_KEY: "!UnsecureChangeMe!"
          ALLOW_ANONYMOUS: 1
          CORS_ALLOWED_ORIGINS: "*"
          PUBLISH_ALLOWED_ORIGINS: http://mercure
          DEMO: 1
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Prepare environment
          working_directory: api
          command: |
            bin/console doctrine:schema:drop --env=test --force
            bin/console doctrine:schema:create --env=test
            bin/console cache:warmup --env=test
      - run:
          name: Behat
          working_directory: api
          command: vendor/bin/behat --format=progress
      - store_artifacts:
          path: api/var/log

  phpunit:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: PHPUnit
          working_directory: api
          command: bin/phpunit --log-junit coverage/junit.xml
      - store_test_results:
          path: api/coverage

  monitor_health:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Monitor health
          working_directory: api
          command: bin/console monitor:health

  php_cs_fixer:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: PHP CS fixer
          working_directory: api
          command: vendor/bin/php-cs-fixer fix --dry-run --ansi --verbose

  phpstan:
    executor: php-executor
    steps:
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: PHPStan
          working_directory: api
          command: vendor/bin/phpstan analyse -c phpstan.neon.dist -l6 --ansi src tests

  swagger_validator:
    executor: client-executor
    steps:
      - run:
          command: apk add ca-certificates
      - restore_cache:
          keys:
            - api-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Install swagger-cli
          command: yarn global add swagger-cli
      - run:
          name: Swagger validator
          working_directory: api
          command: swagger-cli validate swagger.json
      - store_artifacts:
          path: api/swagger.json
          destination: swagger.json

  # Client
  init-client:
    executor: client-executor
    steps:
      - checkout
      - run:
          command: apk add ca-certificates
      - restore_cache:
          keys:
            - node_modules-{{ checksum "client/yarn.lock" }}
            - node_modules-
      - run:
          name: Install dependencies
          working_directory: client
          command: yarn install --pure-lockfile
      - save_cache:
          paths:
            - client/node_modules
          key: node_modules-{{ checksum "client/yarn.lock" }}
      - save_cache:
          paths:
            - ./client
          key: client-{{ .Environment.CIRCLE_SHA1 }}

  jest:
    executor: client-executor
    environment:
      JEST_JUNIT_OUTPUT: coverage/junit.xml
    steps:
      - run:
          command: apk add ca-certificates
      - restore_cache:
          keys:
            - client-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Jest
          working_directory: client
          command: yarn jest --ci --reporters=default --reporters=jest-junit --passWithNoTests
      - store_test_results:
          path: client/coverage

  eslint:
    executor: client-executor
    steps:
      - run:
          command: apk add ca-certificates
      - restore_cache:
          keys: 
            - client-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: ESLint
          working_directory: client
          command: yarn eslint src features

  e2e:
    executor: docker-executor
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Start services
          command: |
            wget https://github.com/mikefarah/yq/releases/download/2.2.1/yq_linux_amd64
            chmod +x ./yq_linux_amd64
            docker-compose config --services | while read -r line ; do
              ./yq_linux_amd64 delete -i docker-compose.yml "services.$line.volumes"
            done
            ./yq_linux_amd64 delete -i docker-compose.yml "volumes"
            docker-compose pull --ignore-pull-failures
            docker-compose build --pull
            docker-compose up -d
            echo "Waiting for PHP container to be up and ready..."
            sleep 10
      - run:
          name: Run tests
          command: docker-compose exec -e REACT_APP_API_ENTRYPOINT=https://h2-proxy:8443 -e REACT_APP_SSE_ENTRYPOINT=https://h2-proxy:1338 client yarn e2e

  # Deploy
  deploy:
    executor: deploy-executor
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          keys:
            - vendor-{{ checksum "api/composer.lock" }}
            - vendor-
      - run:
          name: Deploy
          command: |
            source ci/.env
            if [[ $REPOSITORY == $CIRCLE_PROJECT_REPONAME && $CURRENT_CI == "circleci" ]] && [[ $FEATURE_DEPLOY == "1" || $DEPLOYMENT_BRANCH == $CIRCLE_BRANCH ]]; then
              source ci/before_deploy
              ci/deploy
            else
              echo "Deployment skipped"
            fi

workflows:
  version: 2
  test-and-deploy:
    jobs:
      # API
      - init-api
      - security_checker:
          requires:
            - init-api
      - doctrine_schema_validator:
          requires:
            - init-api
      - phpunit:
          requires:
            - init-api
      - monitor_health:
          requires:
            - init-api
      - php_cs_fixer:
          requires:
            - init-api
      - phpstan:
          requires:
            - init-api
      - behat:
          requires:
            - init-api
      - swagger_validator:
          requires:
            - init-api
       # Client
      - init-client
      - jest:
         requires:
            - init-client
      - e2e:
          requires:
            - init-client
      - eslint:
          requires:
            - init-client
      # Deploy
      - deploy:
          requires:
            - security_checker
            - doctrine_schema_validator
            - behat
            - swagger_validator
            - phpunit
            - monitor_health
            - php_cs_fixer
            - phpstan
            - jest
            - e2e
            - eslint
